function Pipe.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push constant 250
pop this 0
push constant 5
pop this 2
push argument 0
pop this 1
push constant 50
pop this 3
push pointer 0
return
function Pipe.isCollidingWith 0
push argument 0
pop pointer 0
push argument 1
call Bird.getX 1
push argument 1
call Bird.getRadius 1
add
push this 0
gt
push argument 1
call Bird.getX 1
push argument 1
call Bird.getRadius 1
sub
push this 0
push this 2
add
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
call Bird.getY 1
push argument 1
call Bird.getRadius 1
add
push this 1
push this 3
add
gt
push argument 1
call Bird.getY 1
push argument 1
call Bird.getRadius 1
sub
push this 1
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
return
label IF_FALSE1
label IF_FALSE0
push constant 0
return
function Pipe.turn 0
push argument 0
pop pointer 0
push this 0
push argument 1
push constant 10
call Math.divide 2
sub
pop this 0
push this 0
push this 2
add
push constant 0
lt
pop this 4
push constant 0
return
function Pipe.hasPassed 0
push argument 0
pop pointer 0
push argument 1
call Bird.getX 1
push argument 1
call Bird.getRadius 1
sub
push this 0
push this 2
add
gt
return
function Pipe.draw 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push constant 0
push this 0
push this 2
add
push this 1
call Screen.drawRectangle 4
pop temp 0
goto IF_END0
label IF_FALSE0
label IF_END0
push constant 0
return
function Pipe.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
