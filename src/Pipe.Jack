class Pipe
 {
    field int x; // горизонтальная координата трубы (левая граница)
    field int gapY; // координата дырки (координата нижней границы верхней трубы)
    field int width; // ширина трубы
    field int gapSize; // высота дырки между двумя трубами
    field bool passedScene; // прошла ли труба через всю сцену
    
    constructor Pipe new(int gapY1) {
        let x = 250;
        let width = 5;
        let gapY = gapY1;
        let gapSize = 50;
	      return this;
    }
    
    method bool isCollidingWith(Bird bird)
    {
        if (((bird.getX() + bird.getRadius()) > x) & ((bird.getX() - bird.getRadius()) < (x + width))) {
          if (((bird.getY() + bird.getRadius()) > (gapY + gapSize)) & ((bird.getY() - bird.getRadius()) < gapY)) {
              return true;
          }
    	  }                   
        return false;
    }
   
    method void turn(int deltaTime) {
		
        let x = (x - (deltaTime / 10));
        let passedScene = ((x + width) < 0);
        return;
    }
   
    method bool hasPassed(Bird bird) {
        return ((bird.getX() - bird.getRadius()) > (x + width));
    }                   

     method void draw() {
        do Screen.setColor(true);
        if (x > 0) {
          do Screen.drawLine(x, 0, x, gapY);
          do Screen.drawLine(x, gapY, x + width, gapY);
          do Screen.drawLine(x + width, gapY, x + width, 0); 
        }
        else {
          do Screen.drawLine(0, gapY, width + x, gapY);
          do Screen.drawLine(width + x, gapY, width + x, 0); 
        }
	  return;
    }
}
