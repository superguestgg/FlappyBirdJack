class FlappyBird
{
  field Bird bird;
  field int maxTotal;
  field int ceed;
  field int total;
  field Array pipes; // массив всех труб
  field int pipeSpawnNumber;
  field bool isBirdAlive;
  field int birdX;
  field int bird_height_default;
  field int notDeletedPipes;
  field int windiowPipeCount; //какое количество труб влазит на экран

  constructor FlappyBird new() {
      let bird_height_default = 150;
      let bird = Bird.new(bird_height_default);
      let windiowPipeCount = 8;
      let isBirdAlive = true;
      //let birdX = 0;
      //let scoreboard = Scoreboard.new();
      let pipes = Array.new(windiowPipeCount);
      //let count_pipes = 0;
      //let dist_between_pipes = 100;
      //let dist_after_last_pipe = 0;
      //let jumps = 1;
      //let total_pipes = 0;

      return this;
    }

  method void prestart() {
      do Screen.clearScreen(); // Очистить экран
      let ceed = Keyboard.readInt("Please enter a number for generate a area: "); // Запросить у пользователя ввод числа
      // do Screen.moveCursor(8, 0); // Установить курсор в позицию (8,0)
      do Output.printString("touch on a keyboard to start a game."); // Напечатать сообщение
      // 1 тимейт д......, когда его попросили написать эту функцию делегировал задачу chatgpt,
      // поэтому здесь так много комментариев к очевидным строкам,
      // а мне еще потом половину строк пришлось исправлять
      // upd: все строки, он забыл do написать
      return;
  }

    method void run(){
        var char key;
        var int deltaTime;

        let deltaTime = 10;
        do Screen.clearScreen();
        do createGame();
	    do drawPipes();
        // do waitForGameToStart();
        while (~(key = 81)) { // 'q' key
            //do Output.printString("movePipes");
            do bird.turn(deltaTime);
            do movePipes(deltaTime);

            do handleCollisions();
            // If collision found, go to score and reset state.
            if (~(isBirdAlive)) {
                //do Output.printString(" finish ");
                do finishGame();
                do Sys.wait(1000);
                //do initializeGameState();
                //do waitForGameToStart();
                return;
            }

            do draw();

            // Check key pressed.
            let key = Keyboard.keyPressed();
            do Sys.wait(deltaTime);
            
        }
        return;
    }


    method void finishGame(){
        do Output.printString(" you died. ");
        do Output.printString(" you died. ");
        do Output.printString(" you died. ");
        do Output.printString(" you died. ");
        do Output.printString(" pipes finished: ");
        do Output.printInt(pipeSpawnNumber - windiowPipeCount);
        return;
    }


    method void createGame(){
        do bird.draw();
        do createPipes();
        return;
    }


    method void draw(){
        do Screen.clearScreen();
        do bird.draw();
        do drawPipes();
        return;
    }


    method void movePipes(int deltaTime){
        var int pipeNowIndex;
	    var Pipe pipe;
        let pipeNowIndex=0;
	    let notDeletedPipes = 0;

        while (pipeNowIndex < windiowPipeCount){
            
            let pipe = pipes[pipeNowIndex];
            do pipe.turn(deltaTime);
            if (pipe.hasPassed(bird)){
			    let notDeletedPipes = notDeletedPipes + 1;
		    }
            let pipeNowIndex = pipeNowIndex + 1;
        }
	    while (notDeletedPipes > 0){
            do createNewPipe();
            let notDeletedPipes = notDeletedPipes - 1;
        }
        return;
    }


    method void drawPipes(){
        var int pipeNowIndex;
	    var Pipe pipe;
        let pipeNowIndex = 0;
        while (pipeNowIndex < windiowPipeCount){
		    let pipe = pipes[pipeNowIndex];
            do pipe.draw();
            let pipeNowIndex = pipeNowIndex + 1;
        }
        return;
    }

    
    method void handleCollisions(){
        var int pipeNowIndex;
	    var Pipe pipe;
        var bool birdAlive;

        let pipeNowIndex=0;
        let birdAlive = true;
        while (pipeNowIndex < windiowPipeCount){
            
            let pipe = pipes[pipeNowIndex];

            let birdAlive = bird.getAlive(pipe);

            if (~(birdAlive)){
              let isBirdAlive = false;
              return;
            }
            let pipeNowIndex = pipeNowIndex + 1;
        }
        return;
    }

    method void createPipes(){
        var Pipe pipe;
        var int pipeNowIndex;
	    var int pipeHeight;

        let pipeSpawnNumber = 0;
        let pipeNowIndex=0;
        while (pipeNowIndex < windiowPipeCount){
            let pipeSpawnNumber = pipeSpawnNumber + 1;
            let pipeHeight = pipeHeightByNumber(pipeSpawnNumber);
            let pipe = Pipe.new(pipeHeight);
            let pipes[pipeNowIndex] = pipe; // Не было заполнения массива
            do pipe.turn((windiowPipeCount - pipeNowIndex) * 500);

            //do bird.collision(pipe);
            let pipeNowIndex = pipeNowIndex + 1;
        }
        return;
    }

    method int pipeHeightByNumber(int number){
        var int height;
        let height = number * ceed * 11 + 31;
        if (height > 1000){
            let height = height - ((height / 1000) * 1000);
        }
        while (height > 135){
            let height = height - 135;
        }
        let height = height + 40;
        
        return height;
    }

    method void waitForGameToStart(){
        var char key;
        let key = Keyboard.keyPressed();

        while (key = 0) {
            do Sys.wait(10);
            let key = Keyboard.keyPressed();
            //do bird.draw();
            //do updateBirdWingState();
        }

        return;
    }

    method void createNewPipe(){
        var int pipeNowIndex;
        var int pipeHeight;
        var Pipe pipe;
        let pipeNowIndex=0;
        let pipe = pipes[0];
        do pipe.dispose();

        while (pipeNowIndex < (windiowPipeCount-1)){
            let pipeSpawnNumber = pipeSpawnNumber + 1;

            let pipe = pipes[pipeNowIndex+1];
            let pipes[pipeNowIndex] = pipe;
            let pipeNowIndex = pipeNowIndex + 1;
        }
        let pipeSpawnNumber = pipeSpawnNumber + 1;
        
        let pipeHeight = pipeHeightByNumber(pipeSpawnNumber);
        let pipes[(windiowPipeCount - 1)] = Pipe.new(pipeHeight);
        return;
    }
}