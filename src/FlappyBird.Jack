class FlappyBird
{
  field Bird bird;
  field int maxTotal;
  field int ceed;
  field int total;
  field Array pipes;
  field int pipeSpawnNumber;
  field bool isBirdAlive;
  field int birdX;
  field int bird_height_default;

  constructor FlappyBird new() {
      let bird_height_default = 150;
      let bird = Bird.new(bird_height_default);
      let birdX = 0;
      //let scoreboard = Scoreboard.new();
      let pipes = Array.new(10);
      //let count_pipes = 0;
      //let dist_between_pipes = 100;
      //let dist_after_last_pipe = 0;
      //let jumps = 1;
      //let total_pipes = 0;

      return this;
    }

  method void prestart() {
      do Screen.clearScreen(); // Очистить экран
      let ceed = Keyboard.readInt("Введите число число для генерации местности: "); // Запросить у пользователя ввод числа
      do Screen.moveCursor(8, 0); // Установить курсор в позицию (8,0)
      do Screen.printString("Нажмите на клавиатуру, чтобы начать игру."); // Напечатать сообщение
      // 1 тимейт д......, когда его попросили написать эту функцию делегировал задачу chatgpt,
      // поэтому здесь так много комментариев к очевидным строкам,
      // а мне еще потом половину строк пришлось исправлять
      // upd: все строки, он забыл do написать
      return;
  }

    method void run(){
        
        var char key;
        var char last_key;
        do createGame();
        do waitForGameToStart();
        let last_key = 32;

        while (~(key = 81)) { // 'q' key
            // moveall
            let birdX = birdX + 10;
            do bird.turn();
            do movePipes();

            // poxui
            do handleCollisions();

            //draw
            do bird.draw();
            do drawPipes();

            // If collision found, go to score and reset state.
            if (~(isBirdAlive)) {
              //do displayScore();
              do Sys.wait(1000);
              //do initializeGameState();
              //do waitForGameToStart();
              return;
            }

            // Draw updated game to screen.
            // do draw();

            // Check key pressed.
            let last_key = key;
            let key = Keyboard.keyPressed();
            do Sys.wait(10);
        }
        return;
    }

    method void createGame(){
        do bird.draw();
        do createPipes();
        do drawPipes();
        return;
    }


    method void movePipes(){
        var int pipeNowIndex;
var Pipe pipe;
        let pipeNowIndex=0;
        while (pipeNowIndex<10){
            
            let pipe = pipes[pipeNowIndex];
            do pipe.turn();
            let pipeNowIndex = pipeNowIndex + 1;
        }
        return;
    }


    method void drawPipes(){
        var int pipeNowIndex;
	  var Pipe pipe;
        let pipeNowIndex=0;
        while (pipeNowIndex<10){
		let pipe = pipes[pipeNowIndex];
            do pipe.draw();
            let pipeNowIndex = pipeNowIndex + 1;
        }
        return;
    }

    
    method void handleCollisions(){
        var int pipeNowIndex;
	  var Pipe pipe;

        var bool birdAlive;

        let pipeNowIndex=0;
        let birdAlive = true;
        while (pipeNowIndex < 10){
            
            let pipe = pipes[pipeNowIndex];

            let birdAlive = bird.getAlive(pipe);

            if (~(birdAlive)){
              let isBirdAlive = false;
              return;
            }
            let pipeNowIndex = pipeNowIndex + 1;
        }
        return;
    }

    method void createPipes(){
        var Pipe pipe;
        var int pipeNowIndex;
	  var int pipeHeight;
        let pipeSpawnNumber = 0;
        
        let pipeNowIndex=0;
        while (pipeNowIndex < 10){
            let pipeSpawnNumber = pipeSpawnNumber + 1;
            
            let pipeHeight = pipeHeightByNumber(pipeSpawnNumber);
            let pipe = Pipe.new(pipeHeight);
		do pipe.turn();
		do pipe.turn();
		do pipe.turn();
		do pipe.turn();
		do pipe.turn();
		do pipe.turn();
		do pipe.turn();
		do pipe.turn();
		do pipe.turn();
		do pipe.turn();
            //do bird.collision(pipe);
            let pipeNowIndex = pipeNowIndex + 1;
        }
        return;
    }

    method int pipeHeightByNumber(int number){
        var int height;
        let height = number*ceed+70;
        while (height>20000){
            let height = height - 20000;
        }
        while (height>4000){
            let height = height - 4000;
        }
        while (height>400){
            let height = height - 400;
        }
        if (height<50){
            let height = 50;
        }
        return height;
    }

    method void waitForGameToStart(){
        var char key;
        let key = Keyboard.keyPressed();

        while (key = 0) {
            do Sys.wait(10);
            let key = Keyboard.keyPressed();
            //do bird.draw();
            //do updateBirdWingState();
        }

        return;
    }

    method void createNewPipe(){
        var int pipeNowIndex;
        var int pipeHeight;
        var Pipe pipe;
        let pipeNowIndex=0;
        while (pipeNowIndex < 9){
            let pipeSpawnNumber = pipeSpawnNumber + 1;
           
            let pipe = pipes[pipeNowIndex+1];
            let pipes[pipeNowIndex] = pipe;
            let pipeNowIndex = pipeNowIndex + 1;
        }
        let pipeSpawnNumber = pipeSpawnNumber + 1;
        
        let pipeHeight = pipeHeightByNumber(pipeSpawnNumber);
        let pipes[9] = Pipe.new(pipeHeight);
        return;
    }
}